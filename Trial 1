from __future__ import print_function 
import math 
from ortools.constraint_solver import pywrapcp 
from ortools.constraint_solver import routing_enums_pb2 
def distance(x1, y1, x2, y2): 
    # Manhattan distance 
    dist = abs(x1 - x2) + abs(y1 - y2) 
 
    return dist 
class CreateDistanceCallback(object): 
  """Create callback to calculate distances between points.""" 
 
  def __init__(self, locations): 
    """Initialize distance array.""" 
    size = len(locations) 
    self.matrix = {} 
 
    for from_node in range(size): 
      self.matrix[from_node] = {} 
      for to_node in range(size): 
        x1 = locations[from_node][0] 
        y1 = locations[from_node][1] 
        x2 = locations[to_node][0] 
        y2 = locations[to_node][1] 
        self.matrix[from_node][to_node] = distance(x1, y1, x2, y2) 
 
  def Distance(self, from_node, to_node): 
    return int(self.matrix[from_node][to_node]) 
 
# Demand callback 
class CreateDemandCallback(object): 
  """Create callback to get demands at each location.""" 
 
  def __init__(self, demands): 
    self.matrix = demands 
 
  def Demand(self, from_node, to_node): 
    return self.matrix[from_node] 
 
def main(): 
  # Create the data. 
  data = create_data_array() 
  locations = data[0] 
  demands = data[1] 
  num_locations = len(locations) 
  depot = 0    # The depot is the start and end point of each route. 
  num_routes = 3 
 
  # Create routing model. 
  if num_locations > 0: 
    routing = pywrapcp.RoutingModel(num_locations, num_routes, depot) 
    search_parameters = pywrapcp.RoutingModel.DefaultSearchParameters() 
    # Callback to the distance function. 
 
    dist_between_locations = CreateDistanceCallback(locations) 
    dist_callback = dist_between_locations.Distance 
    routing.SetArcCostEvaluatorOfAllVehicles(dist_callback) 
 
    # Put a callback to the demands. 
    demands_at_locations = CreateDemandCallback(demands) 
    demands_callback = demands_at_locations.Demand 
 
    # Add a dimension for demand. 
    slack_max = 0 
    vehicle_capacity = 100 
    fix_start_cumul_to_zero = True 
    demand = "Demand" 
    routing.AddDimension(demands_callback, slack_max, vehicle_capacity, 
                         fix_start_cumul_to_zero, demand) 
    # The following line is only necessary if you have added search parameters different from the 
    # default parameters. If you omit this line, the search uses default search parameters. 
    routing.CloseModelWithParameters(search_parameters) 
    # Set initial routes. 
    initial_routes = [[1,4], [2,3]] 
 
    initial_assignment = routing.ReadAssignmentFromRoutes(initial_routes, True) 
    print("Initial routes: ", initial_routes, "\n") 
    print("Total distance: " + str(initial_assignment.ObjectiveValue()) + "\n") 
    final_assignment = routing.SolveFromAssignmentWithParameters(initial_assignment, search_parameters) 
    if final_assignment: 
      final_routes = get_routes_array(final_assignment, num_routes, routing) 
      print("Final routes: ", final_routes, "\n") 
      print("Total distance: " + str(final_assignment.ObjectiveValue()) + "\n") 
    else: 
      print('No solution found.') 
  else: 
    print('Specify an instance greater than 0.') 
 
def get_routes_array(assignment, num_routes, routing): 
  routes = [] 
  for vehicle_nbr in range(num_routes): 
    index = routing.Start(vehicle_nbr) 
    route = [] 
 
    while not routing.IsEnd(index): 
      index = assignment.Value(routing.NextVar(index)) 
      node_index = routing.IndexToNode(index) 
      route.append(node_index) 
    # Remove last node (the depot). 
    route = route[:-1] 
    routes.append(route) 
  return routes 
 
def create_data_array(): 
 
  locations = [[39.1690941,-87.0105209],[39.1690979,-87.0104752],
  [39.1703796,-87.1848602],[39.1856346,-87.2323761],[39.185688,-87.2324524],[39.1857147,-87.2324829],
  [39.1895065,-87.2311401],[39.2590942,-87.2403183],[39.2616539,-87.2593079],[39.2635536,-87.120903],
  [39.2734642,-87.3888779],[39.2742004,-87.4978638],39.2753067,-87.1127777],[39.2753296,-87.1128311], 
  [39.2844543,-87.0545807],[39.3125191,-86.8661575],[39.3125687,-86.8661957],[39.3559761,-86.7399139], 
  [39.355999,-86.7398529],[39.35606,-86.7399139],[39.3672256,-87.3880997],[39.3697548,-87.388176], 
  [39.3904305,-87.4535141],[39.3918915,-87.3052063],[39.3934288,-87.3728409],[39.3971024,-87.4517288], 
  [39.3982201,-87.3718567],[39.3985672,-87.3720856],[39.4305305,-87.325264],[39.4305992,-87.3328934], 
  [39.4306221,-87.3330612],[39.4307861,-87.3306274],[39.4320641,-87.3328781],[39.4446602,-87.5052032],
  [39.4479027,-87.2012253],[39.4577484,-87.2955017],[39.4585533,-86.8554382],[39.4627762,-87.2954025],
  [39.4627762,-87.2954559],[39.4654427,-87.4138565],[39.4665794,-87.4232025],[39.492794,-87.4138107],
  [39.5002213,-87.2390747],[39.5003014,-87.23909],[39.5081291,-86.4568405],[39.5082664,-86.4569473], 
  [39.5202675,-87.1395569],[39.520298,-87.1396408],[39.521328,-86.6415329],[39.5280037,-86.8773499], 
  [39.5316963,-86.8024826],[39.5745735,-86.8655243],[39.5788727,-86.479454],[39.6057281,-87.1207657],
  [39.6073341,-87.5321655],[39.6073875,-86.3647995],[39.6073875,-86.3649216],[39.6074295,-86.3648148], 
  [39.610424,-86.3749847],[39.6276474,-86.6701889],[39.630291,-86.66996],[39.6304665,-86.6874237],[39.6306725,-86.385582]
  [39.6348648,-86.8530045],[39.6488953,-86.3265381],[39.6542473,-86.3961258],[39.6586189,-87.4414902],[39.6587067,-87.4350204],
  [39.6649399,-87.5325699],[39.6651306,-87.520752],[39.6761971,-86.3501129],[39.727829,-86.3327484],[39.7295151,-86.3265228],
  [39.7591858,-87.1051941],[39.7611427,-86.7664642],[39.7789726,-86.5429764],[39.7925034,-87.3746338],[39.7962112,-87.5332108],
  [39.8176804,-86.3271942],[39.8305473,-86.3274384],[39.8433571,-86.8947144],[39.8433762,-86.3979645],[39.8487282,-86.6868134],
  [39.8598518,-86.6426773],[39.8776054,-87.2202148],[39.8812675,-87.0459976],[39.8817253,-87.0472565],[39.9031601,-86.5573959], 
  [39.9045448,-87.4413605],[39.9157562,-86.6952515],[39.9227943,-86.6337433],[39.9372025,-86.6196976],[39.9469833,-87.5328217], 
  [39.9470673,-86.3537292],[39.9494553,-86.3561783],[39.9504967,-86.2408905],[39.9602852,-87.0902863],[39.967556,-87.1484756],
  [39.9805756,-86.3960953],[39.9811821,-86.3952713],[40.0379982,-87.158165],[40.0393143,-86.4128876],[40.0468407,-86.8758926],
  [40.0663223,-87.5318527],[40.0695305,-86.4970169],[40.0875778,-87.0589828],[40.1065178,-87.148613],[40.1100731,-87.0919113],
  [40.1136742,-87.2433319],[40.1217461,-87.3776398],[40.1268272,-86.5613632],[40.1329498,-87.5315933],[40.1491547,-87.4472198],
  [40.1491814,-87.4469147],[40.1589775,-86.9056778],[40.1645584,-86.9030151],[40.1655426,-86.2612534],[40.1756592,-87.0743256],
  [40.1772842,-86.4870071],[40.2523651,-86.6989365],[40.2616844,-86.6596756],[40.279232,-86.3947525],[40.2798996,-87.148735],
  [40.2820129,-87.5296326],[40.3070297,-87.2895432],[40.3070602,-87.289444],[40.3194733,-87.3874512],[40.3196869,-87.3876419], 
  [40.4005928,-86.85746],[40.4021912,-86.5253601],[40.4156952,-86.3928757],[40.4157448,-86.3929367],[40.4167404,-86.5252457],
  [40.4167824,-86.9304581],[40.4167824,-86.9305038],[40.4168015,-86.5252991],[40.4169579,-86.5948029],[40.4343796,-86.8980179],
  [40.4344215,-86.897995],[40.438633,-86.9377213],[40.4386787,-86.9378128],[40.4388428,-86.917305],[40.4388771,-86.9174194],
  [40.4525528,-86.9030838],[40.4525528,-86.9031448],[40.4551926,-86.8486328],[40.461937,-87.5267868],[40.4623642,-87.3778687],
  [40.4674377,-87.5267181],[40.4755135,-87.5266113],[40.4755859,-87.5266113],[40.5060577,-86.8359222],[40.5100327,-86.8382568],
  [40.5184441,-86.8687897],[40.5206375,-87.4906998],[40.5581055,-86.6952972],[40.562851,-87.0305099],[40.5658073,-86.6617661],
  [40.567234,-86.658371],[40.5685005,-86.6594162],[40.6026955,-86.8685989],[40.6053162,-86.8686142],[40.6053543,-86.8686752], 
  [40.6113472,-87.3151779],[40.6176758,-87.3241348],[40.6195831,-87.5260544],[40.6224098,-87.4909668],[40.6657257,-87.3848724], 
  [40.6712379,-87.0408707],[40.7510948,-87.324646],[40.7514992,-87.4915314],[40.7615852,-87.1168594],[40.7655029,-87.1196671], 
  [40.7657204,-87.1194763],[40.7673187,-87.4383926],[40.7693863,-87.4914856],[40.7693939,-87.4914856]]
 
  demands = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,
  44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,
  87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,
  123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,
  156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177
] 
  data = [locations, demands] 
  return data 
 
if __name__ == '__main__': 
  main()
